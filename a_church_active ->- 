complete                 package:tidyr                 R Documentation

_C_o_m_p_l_e_t_e _a _d_a_t_a _f_r_a_m_e _w_i_t_h _m_i_s_s_i_n_g _c_o_m_b_i_n_a_t_i_o_n_s _o_f _d_a_t_a

_D_e_s_c_r_i_p_t_i_o_n:

     Turns implicit missing values into explicit missing values. This
     is a wrapper around ‘expand()’, ‘dplyr::left_join()’ and
     ‘replace_na()’ that's useful for completing missing combinations
     of data.

_U_s_a_g_e:

     complete(data, ..., fill = list())
     
_A_r_g_u_m_e_n_t_s:

    data: A data frame.

     ...: Specification of columns to expand. Columns can be atomic
          vectors or lists.

          To find all unique combinations of x, y and z, including
          those not found in the data, supply each variable as a
          separate argument. To find only the combinations that occur
          in the data, use nest: ‘expand(df, nesting(x, y, z))’.

          You can combine the two forms. For example, ‘expand(df,
          nesting(school_id, student_id), date)’ would produce a row
          for every student for each date.

          For factors, the full set of levels (not just those that
          appear in the data) are used. For continuous variables, you
          may need to fill in values that don't appear in the data: to
          do so use expressions like ‘year = 2010:2020’ or year =
          \link{full_seq}(year,1).

          Length-zero (empty) elements are automatically dropped.

    fill: A named list that for each variable supplies a single value
          to use instead of ‘NA’ for missing combinations.

_D_e_t_a_i_l_s:

     If you supply ‘fill’, these values will also replace existing
     explicit missing values in the data set.

_E_x_a_m_p_l_e_s:

     library(dplyr, warn.conflicts = FALSE)
     df <- tibble(
       group = c(1:2, 1),
       item_id = c(1:2, 2),
       item_name = c("a", "b", "b"),
       value1 = 1:3,
       value2 = 4:6
     )
     df %>% complete(group, nesting(item_id, item_name))
     
     # You can also choose to fill in missing values
     df %>% complete(group, nesting(item_id, item_name), fill = list(value1 = 0))
     

